<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Mohammad Fahim</title>
		<link>https://mfahim.github.io/posts/</link>
		<description>Recent content in Posts on Mohammad Fahim</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Sat, 15 Aug 2015 00:00:00 +0000</lastBuildDate>
		<atom:link href="https://mfahim.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Working as Stream Lead</title>
			<link>https://mfahim.github.io/posts/working-as-stream-lead/</link>
			<pubDate>Sat, 15 Aug 2015 00:00:00 +0000</pubDate>
			
			<guid>https://mfahim.github.io/posts/working-as-stream-lead/</guid>
			<description>&lt;p&gt;Last month I got promotion from the company that I work for and now I wear a new hat as Stream Lead. This title could be a little in an Scrum environment,&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>Last month I got promotion from the company that I work for and now I wear a new hat as Stream Lead. This title could be a little in an Scrum environment,</p>
<p>However, the idea comes from Spotify. Here is a brief introduction on how that could be useful.<a href="https://labs.spotify.com/2014/03/27/spotify-engineering-culture-part-1/">(more)</a></p>
<h2 id="first-days-as-stream-lead">&lsquo;First Days as Stream lead&rsquo;</h2>
<p><strong>The Challenges</strong></p>]]></content>
		</item>
		
		<item>
			<title>Loops And Iterations in GoLang</title>
			<link>https://mfahim.github.io/posts/read/write-files-in-golang/</link>
			<pubDate>Sat, 01 Aug 2015 00:00:00 +0000</pubDate>
			
			<guid>https://mfahim.github.io/posts/read/write-files-in-golang/</guid>
			<description>&lt;p&gt;Like any other language Go has its way of doing things such as for, while,&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>Like any other language Go has its way of doing things such as for, while,</p>
<h2 id="os-package">&lsquo;os&rsquo; package</h2>
<p><strong>For loop</strong></p>
<p>The most simple approach can be done through &ldquo;os&rdquo; package. The error handling is Go-like; failing calls return values of type error rather than error numbers.</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go">
	<span class="c1">// map
</span><span class="c1"></span>	<span class="kd">var</span> <span class="nx">mapCol</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="kt">string</span><span class="p">)</span>
	<span class="nx">mapCol</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="s">&#34;Hellp&#34;</span>
	<span class="nx">mapCol</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="p">=</span> <span class="s">&#34;me&#34;</span>

	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">mapCol</span><span class="p">)</span>

</code></pre></div><p>The preferred approach after opening any file is safe closing that file. Go has a modern way of doing this by calling &lsquo;defer&rsquo; statement. It's perfect for situations when resources must be release regardless of which path a function takes to return. For example, in opening multiple files; defer guarantees that  all resources will be safely released if any error occurred during opening one the files.</p>
<p><strong>While loop</strong></p>
<p>In order to show the file's content, I created a buffer to keep the chunks that I read and iterate over that to show the content.</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go">	<span class="kd">var</span> <span class="nx">arrStr</span> <span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="kt">int</span>
	<span class="nx">arrStr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">=</span> <span class="mi">10</span>
	<span class="nx">arrStr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="mi">12</span>

	<span class="nx">slicer</span> <span class="o">:=</span> <span class="nx">arrStr</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="p">]</span>
	<span class="nx">slicer</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">slicer</span><span class="p">,</span> <span class="mi">23</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">slicer</span><span class="p">)</span>

</code></pre></div><h2 id="bufio-package">&lsquo;bufio&rsquo; package</h2>
<p>&lsquo;bufio&rsquo; provides buffering under the hood and makes really when we're working with lots of reads and writes, specially for text files.
&lsquo;NewReader&rsquo; returns a reader whose buffer has default size. For example for reading a file the code looks like below.</p>
<div class="highlight"><pre class="chroma"><code class="language-golang" data-lang="golang">
	<span class="nx">reader</span> <span class="o">:=</span> <span class="nx">bufio</span><span class="p">.</span><span class="nf">NewReader</span><span class="p">(</span><span class="nx">file</span><span class="p">)</span> <span class="c1">// make a read buffer
</span><span class="c1"></span>	
	<span class="nx">data</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="p">[</span><span class="p">]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">1024</span><span class="p">)</span>
	<span class="nx">count</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">reader</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="c1">// read a chunk
</span><span class="c1"></span>	
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">err</span> <span class="o">!=</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span> <span class="p">{</span>
		<span class="nb">panic</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;an error occured in reading the file: {%s}&#34;</span><span class="p">,</span> <span class="s">&#34;data&#34;</span><span class="p">)</span><span class="p">)</span>
	<span class="p">}</span>
	
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">count</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">)</span><span class="p">)</span>
	<span class="p">}</span>

</code></pre></div><p><strong>Writing to a file</strong></p>
<p>Three methods Write(p byte[]), WriteByte(c byte), WriteString(s string) are all write some content into the buffer.</p>
<div class="highlight"><pre class="chroma"><code class="language-Go" data-lang="Go">
	<span class="c1">// open output file
</span><span class="c1"></span>	<span class="nx">output</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Create</span><span class="p">(</span><span class="s">&#34;output.txt&#34;</span><span class="p">)</span>
	
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nb">panic</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;an error occured in creating the file: {%s}&#34;</span><span class="p">,</span> <span class="s">&#34;output&#34;</span><span class="p">)</span><span class="p">)</span>
	<span class="p">}</span>
	
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">count</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="nx">n2</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">output</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="p">:</span><span class="nx">i</span><span class="p">]</span><span class="p">)</span>
		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
			<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
		<span class="p">}</span>
	<span class="p">}</span>
    
</code></pre></div><h2 id="bufio-package-1">&lsquo;bufio&rsquo; package</h2>
<p>Likewise reading from file, &lsquo;bufio&rsquo; provides some methods when writing a buffer to a file.</p>]]></content>
		</item>
		
		<item>
			<title>About Visual Studio 2015</title>
			<link>https://mfahim.github.io/posts/about-visual-studio-2015/</link>
			<pubDate>Wed, 01 Jul 2015 00:00:00 +0000</pubDate>
			
			<guid>https://mfahim.github.io/posts/about-visual-studio-2015/</guid>
			<description>&lt;p&gt;I don&#39;t know how long you&#39;ve been on the Visual Studio train, but my personal experience started when Visual C++ 6.0 was the only game in the town. MFC and ATL were the major solid libraries that most developers relied on. However, my primary focus of this post is more about the evolution of Visual Studio.Net since 2002.&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>I don't know how long you've been on the Visual Studio train, but my personal experience started when Visual C++ 6.0 was the only game in the town. MFC and ATL were the major solid libraries that most developers relied on. However, my primary focus of this post is more about the evolution of Visual Studio.Net since 2002.</p>
<p>So, scanning my mind quickly, here's the list of things that I can outline:</p>
<ul>
<li>VS 2002 - .Net 1.0 - WebFoms/WebService</li>
<li>VS 2003 - .Net 1.1 - Bug fixing/Compact Frameworks</li>
<li>VS 2005 - .Net 2.0 - Asp.net 2.0/ Local IIS</li>
<li>VS 2008 - .Net 3.5 - Linq/MVC/Some Testing tools/ TFS</li>
<li>VS 2010 - .Net 4.0 - MVC 3/ Test Manager</li>
<li>VS 2012 - .Net 4.5 - MVC4 / Nuget/ Metro UI/ WebEssentials/</li>
<li>VS 2013 - .Net 4.5.1 - MVC5 / WebAPI/ Git Support/TypeScript/Bootstrap/Code Map/Browser Link</li>
</ul>
<p>Looking back on it, we'll see more of these changes towards better team management and quality of production code and more Agile-friendly in one word.
However, Visual Studio 2015 is supposed to be a different environment for all MS developers. Specially on the web application front, many changes have been made to persue them into new generations of web apps.</p>
<p>Visual Studio 2015 has some tentacles, I'll write about them in brief.</p>
<ol>
<li>
<p>VS 2015 online(Monaco): is the online editing tool for Azure websites. It's great for cross-platform development, CI (builds &amp; integrations) and hook to other online services. e.g. Github, Jenkins, Trello, Bamboo,..!</p>
</li>
<li>
<p>VS 2015: The most important one is all menu items are not in caps anymore! The new changes cover some areas that I put them under these categories:</p>
</li>
<li>
<p>Compiler (Roslyn)</p>
</li>
<li>
<p>Portable Class Libraries (Native &amp; Hybrid apps)</p>
</li>
<li>
<p>Asp.net VNext</p>
</li>
<li>
<p>Owin</p>
</li>
</ol>
<pre><code>**Compiler (Roslyn):**

In short Roslyn is compiler as services via api. One of the good things about Roslyn is Out of the box Parser &amp; Lexer. It allows you to do code-fixes, even you can see what’s going to compile by Roslyn Syntax visualizer. However, HTML &amp; typescript are not not supported in the current version.

So, in visual studio the impact is lead into a great one which is by saving a file the whole project built. (Dynamic Compilation)
The sad point about that is the Resharper. They have developed their own parsers and based on the news, they're not going to change it to adapt with Roslyn. You can do refactoring either by Roslyn or Resharper.
Roslyn Refrences:   

 - Matt Warren Roslyn performance lessons: 
  - [Roslyn code-base performance lessons-1](http://mattwarren.org/2014/06/05/roslyn-code-base-performance-lessons-part-1/) 
  - [Roslyn code-base performance lessons-2](http://mattwarren.org/2014/06/10/roslyn-code-base-performance-lessons-part-2/) 

 - Roslyn official website: [Some samples and wlakthroughs](https://github.com/dotnet/roslyn/wiki/Samples-and-Walkthroughs) 

**Portable Class Libraries:**

This is the one that makes everybody excited about Visual studio being cross-platform. By that we can create cross-platform apps and libraries.
The obvious benefit is writting native applications for mobile and share 75% of your code. 

The whole ideas is reuse your code as much as you can and put them under 'Shared' project(PCL) and having different projects for different platforms. VS 2015 provides some options to design your form based on different size and also Xamarin Forms could be another candidate. Debugging and Testing on emulators are some plus features for devs.

On the other side, VS provides good tooling with Hybrid mindset. 'Apache Cordova' is included into product and with support for native device capabilities (e.g. camera, accelerometer, contact), offline scenarios and popular JavaScript frameworks (e.g. Angular, React and Backbone), the Tools for Apache Cordova contain everything web developers need for building cross-platform mobile apps using Visual Studio.Don't worry about the challenges from Cordova UI: 'Ionic' and 'Onsen UI' are helpful libraries to come over some known issues from different devices.

**Asp.net VNext**

Finally, npm, bower, and grunt/gulp an dbower inetrgate nicely in VS 2015. So, client-side compilation can be done on the client by the client tools. All package management and bundling, minification and... by js files. To be short here's the list of changes:   

no more web.config, .csproj. (project.json(nuget), config.json(web.config), package.json(npm), bower.json(front-end package mngr), gruntfile.json(process your js/css files)
- wwwroot for static file (content)
- WebApi &amp; Controllers are in one.
- Angularjs templates


**Owin**

To my undesrtanding, Owin is making asp.net mvc to be launched on Linux, Osx. Owin in VS 2015 has addressed one the biggest problems of Asp.net. Which is being slow. All of the Asp.net competitors like PHP load time are a lot faster and that was because in Asp.net all modules including the resudant ones need to be loaded in the first place. 

The real beauty of OWIN is that it gives you direct access to the ASP.NET pipeline in a relatively friction-free way. This is a great place to deal with cross-cutting concerns such as logging and authentication. Dependency injection is now also an integral part of OWIN and can be used to inject services into your middleware.

By using appbuilder (single interface) to register any middleware component that handle the web request ( SignalR, webapi, asp.net identity) 
Overally, your Http pipeline is optimised in what you need. 
</code></pre>
<ul>
<li>
<p>Startup.cs -&gt; define what services needs to be added (EF, MVC, routes, features, auth)</p>
</li>
<li>
<p>Owin means asp.net mvc running on Linux, Osx</p>
</li>
<li>
<p>Owin :</p>
</li>
<li>
<p>Asp.net KRE, KVM, KPM -&gt; cmd -&gt; (install K)K Runtime env, K version mngr(install KRE), K Package mngr(run app)</p>
</li>
<li>
<p>Microsoft Built-in dependency injection. So, no Autofac, Structremap, Ninject, You can use dependency injection in Razor page, too!</p>
</li>
</ul>]]></content>
		</item>
		
		<item>
			<title>Read/Write files in GoLang</title>
			<link>https://mfahim.github.io/posts/read/write-files-in-golang/</link>
			<pubDate>Sat, 27 Jun 2015 00:00:00 +0000</pubDate>
			
			<guid>https://mfahim.github.io/posts/read/write-files-in-golang/</guid>
			<description>&lt;p&gt;When dealing with files in Go, &amp;lsquo;os&amp;rsquo; and &amp;lsquo;ioutil&amp;rsquo; built-in packages provide  some utility functions to work with I/O.&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>When dealing with files in Go, &lsquo;os&rsquo; and &lsquo;ioutil&rsquo; built-in packages provide  some utility functions to work with I/O.</p>
<h2 id="os-package">&lsquo;os&rsquo; package</h2>
<p><strong>Opening a file</strong></p>
<p>The most simple approach can be done through &ldquo;os&rdquo; package. The error handling is Go-like; failing calls return values of type error rather than error numbers.</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go">
   <span class="nx">file</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;data.csv&#34;</span><span class="p">)</span> <span class="c1">// read access
</span><span class="c1"></span>
   <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
      <span class="nb">panic</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;an error occured in reading the file: {%s}&#34;</span><span class="p">,</span> <span class="s">&#34;data&#34;</span><span class="p">)</span><span class="p">)</span>
   <span class="p">}</span>

   <span class="k">defer</span> <span class="nx">file</span><span class="p">.</span><span class="nf">Close</span><span class="p">(</span><span class="p">)</span> <span class="c1">// file.Close will run when we&#39;re finished.
</span><span class="c1"></span>
</code></pre></div><p>The preferred approach after opening any file is safe closing that file. Go has a modern way of doing this by calling &lsquo;defer&rsquo; statement. It's perfect for situations when resources must be release regardless of which path a function takes to return. For example, in opening multiple files; defer guarantees that  all resources will be safely released if any error occurred during opening one the files.</p>
<p><strong>Reading from a file</strong></p>
<p>In order to show the file's content, I created a buffer to keep the chunks that I read and iterate over that to show the content.</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go">
	<span class="nx">data</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="p">[</span><span class="p">]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">1024</span><span class="p">)</span> <span class="c1">// make a buffer 
</span><span class="c1"></span>	
	<span class="nx">count</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">file</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
	 <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">err</span> <span class="o">!=</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span> <span class="p">{</span>
	<span class="nb">panic</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;an error occured in reading the file: {%s}&#34;</span><span class="p">,</span> <span class="s">&#34;data&#34;</span><span class="p">)</span><span class="p">)</span>
	<span class="p">}</span>
	
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">count</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
	  <span class="nx">fmt</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">)</span><span class="p">)</span>
	<span class="p">}</span>

</code></pre></div><h2 id="bufio-package">&lsquo;bufio&rsquo; package</h2>
<p>&lsquo;bufio&rsquo; provides buffering under the hood and makes really when we're working with lots of reads and writes, specially for text files.
&lsquo;NewReader&rsquo; returns a reader whose buffer has default size. For example for reading a file the code looks like below.</p>
<div class="highlight"><pre class="chroma"><code class="language-golang" data-lang="golang">
	<span class="nx">reader</span> <span class="o">:=</span> <span class="nx">bufio</span><span class="p">.</span><span class="nf">NewReader</span><span class="p">(</span><span class="nx">file</span><span class="p">)</span> <span class="c1">// make a read buffer
</span><span class="c1"></span>	
	<span class="nx">data</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="p">[</span><span class="p">]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">1024</span><span class="p">)</span>
	<span class="nx">count</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">reader</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="c1">// read a chunk
</span><span class="c1"></span>	
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">err</span> <span class="o">!=</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span> <span class="p">{</span>
		<span class="nb">panic</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;an error occured in reading the file: {%s}&#34;</span><span class="p">,</span> <span class="s">&#34;data&#34;</span><span class="p">)</span><span class="p">)</span>
	<span class="p">}</span>
	
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">count</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">)</span><span class="p">)</span>
	<span class="p">}</span>

</code></pre></div><p><strong>Writing to a file</strong></p>
<p>Three methods Write(p byte[]), WriteByte(c byte), WriteString(s string) are all write some content into the buffer.</p>
<div class="highlight"><pre class="chroma"><code class="language-Go" data-lang="Go">
	<span class="c1">// open output file
</span><span class="c1"></span>	<span class="nx">output</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Create</span><span class="p">(</span><span class="s">&#34;output.txt&#34;</span><span class="p">)</span>
	
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nb">panic</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;an error occured in creating the file: {%s}&#34;</span><span class="p">,</span> <span class="s">&#34;output&#34;</span><span class="p">)</span><span class="p">)</span>
	<span class="p">}</span>
	
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">count</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="nx">n2</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">output</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="p">:</span><span class="nx">i</span><span class="p">]</span><span class="p">)</span>
		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
			<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
		<span class="p">}</span>
	<span class="p">}</span>
    
</code></pre></div><h2 id="bufio-package-1">&lsquo;bufio&rsquo; package</h2>
<p>Likewise reading from file, &lsquo;bufio&rsquo; provides some methods when writing a buffer to a file.</p>]]></content>
		</item>
		
		<item>
			<title>No CMS Movement</title>
			<link>https://mfahim.github.io/posts/no-cms-movement/</link>
			<pubDate>Mon, 26 Jan 2015 00:00:00 +0000</pubDate>
			
			<guid>https://mfahim.github.io/posts/no-cms-movement/</guid>
			<description>&lt;h4 id=&#34;welcome-to-my-first-post&#34;&gt;Welcome to my first post!&lt;/h4&gt;
&lt;p&gt;Yeah! This post is a static HTML page, No dynamic partial fragments, no connection to database, no charges from any CMS website or 3rd party. Unbelievable, isn&#39;t it?&lt;/p&gt;
&lt;p&gt;It&#39;s a page written in MarkDown and deployed on GitHub.
Internet and its evolving nature pushed us one more time to a correct direction. 
Obviously, all static pages are faster, less expensive and more straightforward to maintain.&lt;/p&gt;</description>
			<content type="html"><![CDATA[<h4 id="welcome-to-my-first-post">Welcome to my first post!</h4>
<p>Yeah! This post is a static HTML page, No dynamic partial fragments, no connection to database, no charges from any CMS website or 3rd party. Unbelievable, isn't it?</p>
<p>It's a page written in MarkDown and deployed on GitHub.
Internet and its evolving nature pushed us one more time to a correct direction. 
Obviously, all static pages are faster, less expensive and more straightforward to maintain.</p>
<p>Personally, after some years of developing server-side page applications, I was intrigued by the concept of static blogging engine. Technically, most of the well-known ones turn a pile of templates, content, and resources (like CSS and images) into a neat stack of plain HTML. You run it on your local computer, and it generates a directory of web files that you can upload to your web server, or serve directly.</p>
<h2 id="basic-concept">Basic Concept</h2>
<p>The idea is that you don't need a big server-side engine like IIS, PHP, etc. to generate every page, every visit, for every visitor. You can generate the entire site once ahead of time, and only regenerate things when something has changed, e.g. with a post-commit hook on a Git repository containing your content or layout.</p>
<p>One of the clear benefits of this approach is caching without any complex mechanism. Web servers are built to quickly cache static content. All images, styles, javascript libraries could be cached on browsers as well.</p>
<h2 id="how-the-new-wave-has-been-started">How the new wave has been started?</h2>
<p>I believe, It's around the key question of whether we really need real-time contents. Many bloggers/publishers have ultimately admitted that not everything needs to be “real time,” and that most users, in most scenarios, don’t experience a noticeable difference between real time and near real time.</p>
<h2 id="big-players-in-the-market">Big players in the market</h2>
<p>Actually, there are many. Every technology/programming languages build a blogging platform for its users.</p>
<ol>
<li><a href="http://jekyllrb.com/">Jekyll</a>: probably the most popular one. It's a Ruby based engine and features tight integration with GitHub.</li>
</ol>
<ul>
<li><a href="http://octopress.org/">OctoPress</a> is based on Jekyll and makes it easier to get started by adding default templates and various other tweaks.</li>
</ul>
<ol>
<li>
<p><a href="http://docs.getpelican.com">Pelican</a>: a python based blogging engine and has most of the features you'd expect. It uses Dropbox as uploading system.</p>
</li>
<li>
<p><a href="https://ghost.org/">Ghost</a>: The brainchild of one the heads of WordPress team that focuses on writing and publishing. Simply a Node.js app built upon the Express framework.</p>
</li>
<li>
<p><a href="http://scriptogr.am/">Scriptogr.am</a>: A tool for generating simple, elegant, static weblogs by reading Markdown files stored in your Dropbox folder.</p>
</li>
<li>
<p><a href="http://dropplets.com/">Dropplets</a> : is a minimalist Markdown blogging platform focused on delivering based on PHP.</p>
</li>
<li>
<p><a href="http://gohugo.io/">Hugo</a>: A fast and flexible blogging engine that works in many formats. It's written in Go language.</p>
</li>
</ol>
<p>In my next posts, I'll elaborate on the new wave of content management via static pages via Hugo.</p>
<p>Happy Static Blogging!</p>]]></content>
		</item>
		
	</channel>
</rss>
